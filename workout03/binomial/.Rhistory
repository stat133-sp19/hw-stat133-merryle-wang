}
}
aux_mean <- function(trials,prob){
return(trials*prob)
}
aux_variance <- function(trials,prob){
return(sqrt(trials*prob*(1-prob)))
}
aux_mode <- function(trials,prob){
m <- trials*prob + prob
if(m%%1 == 0){
return(c(as.integer(m),as.integer(m-1)))
}else{
return(as.integer(m))
}
}
aux_skewness <- function(trials,prob){
top <- 1 - 2*prob
return(top/aux_variance(trials,prob))
}
aux_kurtosis <- function(trials,prob){
top <- 1 - 6*prob*(1-prob)
bottom <- trials*prob*(1-prob)
return(top/bottom)
}
bin_choose <- function(n,k){
if(k > n){
stop('k cannot be greater than n')
}
return(factorial(n)/(factorial(k)*factorial(n-k)))
}
bin_probability <- function(success,trials,prob){
if(check_trials(trials) && check_prob(prob) && check_success(success,trials)){
return(bin_choose(trials,success)*(prob^success)*((1-prob)^(trials-success)))
}
}
bin_distribution <- function(trials,prob){
success <- 0:trials
probability <- bin_probability(success,trials,prob)
df <- data.frame(success,probability)
class(df) <- c("bindis","data.frame")
return(df)
}
library(ggplot2)
plot.bindis <- function(dis){
ggplot(data = dis,aes(x = success,y = probability)) +
geom_col()
}
bin_cumulative <- function(trials,prob){
success <- 0:trials
probability <- bin_probability(success,trials,prob)
cumulative <- cumsum(probability)
df <- data.frame(success,probability,cumulative)
class(df) <- c("bindis","data.frame")
return(df)
}
bin_cumulative(5,0.5)
plot.bincum <- function(dis){
ggplot(data = dis,aes(x = success,y = cumulative)) +
geom_col()
}
plot(bin_distribution(5,0.5))
plot.bincum <- function(dis){
ggplot(data = dis,aes(x = success,y = cumulative)) +
geom_line()
}
bin_cumulative <- function(trials,prob){
success <- 0:trials
probability <- bin_probability(success,trials,prob)
cumulative <- cumsum(probability)
df <- data.frame(success,probability,cumulative)
class(df) <- c("bincum","data.frame")
return(df)
}
plot(bin_cumulative(5,0.5))
plot.bincum <- function(dis){
ggplot(data = dis,aes(x = success,y = cumulative)) +
geom_line() +
geom_point()
}
plot.bincum <- function(dis){
ggplot(data = dis,aes(x = success,y = cumulative)) +
geom_line() +
geom_point() +
ylab("probability")
}
plot(bin_cumulative(5,0.5))
bin_variable <- function(trials,prob){
if(check_trials(trials) && check_prob(prob)){
ret <- list(trials,prob)
class(ret) <- "binvar"
return(ret)
}
}
bin_variable(5,0.2)
class(bin_variable(5,0.2))
print("yo")
print.binvar <- function(bin){
print("Binomial variable")
print("Parameters")
print("- number of trials:")
print("- prob of success :")
}
print(bin_variable(5,0.2))
print.binvar <- function(bin){
print("Binomial variable")
print()
print("Parameters")
print("- number of trials:")
print("- prob of success :")
}
print(bin_variable(5,0.2))
print.binvar <- function(bin){
print("Binomial variable")
print("")
print("Parameters")
print("- number of trials:")
print("- prob of success :")
}
print(bin_variable(5,0.2))
print.binvar <- function(bin){
print("Binomial variable")
print("",quote=FALSE)
print("Parameters",quote=FALSE)
print("- number of trials:",quote=FALSE)
print("- prob of success :",quote=FALSE)
}
print(bin_variable(5,0.2))
print.binvar <- function(bin){
print("Binomial variable")
print("",quote=FALSE)
print("Parameters",quote=FALSE)
print(paste0("- number of trials : ",bin$trials),quote=FALSE)
print(paste0("- prob of success : ",bin$prob),quote=FALSE)
}
print(bin_variable(5,0.2))
x <- bin_variable(5,0.2)
x
class(x)
x$trials
x[[1]]
x[[2]]
print.binvar <- function(bin){
print("Binomial variable")
print("",quote=FALSE)
print("Parameters",quote=FALSE)
print(paste0("- number of trials : ",bin[[1]]),quote=FALSE)
print(paste0("- prob of success : ",bin[[2]]),quote=FALSE)
}
print(bin_variable(5,0.2))
summary.binvar <- function(bin){
t <- bin[[1]]
p <- bin[[2]]
ret <- list(t,p,aux_mean(t,p),aux_variance(t,p),aux_mode(t,p)
,aux_skewness(t,p),aux_kurtosis(t,p))
class(ret) <- "binvar"
return(ret)
}
summary.binvar <- function(bin){
t <- bin[[1]]
p <- bin[[2]]
ret <- list(t,p,aux_mean(t,p),aux_variance(t,p),aux_mode(t,p)
,aux_skewness(t,p),aux_kurtosis(t,p))
class(ret) <- "summary.binvar"
return(ret)
}
summary(bin_variable(5,0.2))
print.summary.binvar <- function(binsum){
print("Summary Binomial")
print("",quote=FALSE)
print("Parameters",quote=FALSE)
print(paste0("- number of trials : ",binsum[[1]]),quote=FALSE)
print(paste0("- prob of success : ",binsum[[2]]),quote=FALSE)
print("",quote=FALSE)
print("Measures",quote=FALSE)
print(paste0("- mean : ",binsum[[3]]),quote=FALSE)
print(paste0("- variance : ",binsum[[4]]),quote=FALSE)
print(paste0("- mode : ",binsum[[5]]),quote=FALSE)
print(paste0("- skewness : ",binsum[[6]]),quote=FALSE)
print(paste0("- kurtosis : ",binsum[[7]]),quote=FALSE)
}
summary(bin_variable(5,0.3))
summary(bin_variable(10,0.3))
aux_variance(10,0.3)
summary.binvar <- function(bin){
t <- bin[[1]]
p <- bin[[2]]
ret <- list(t,p,aux_mean(t,p),aux_variance(t,p),aux_mode(t,p)
,aux_skewness(t,p),aux_kurtosis(t,p))
class(ret) <- "summary.binvar"
return(ret)
}
print.summary.binvar <- function(binsum){
print("Summary Binomial")
print("",quote=FALSE)
print("Parameters",quote=FALSE)
print(paste0("- number of trials : ",binsum[[1]]),quote=FALSE)
print(paste0("- prob of success : ",binsum[[2]]),quote=FALSE)
print("",quote=FALSE)
print("Measures",quote=FALSE)
print(paste0("- mean : ",binsum[[3]]),quote=FALSE)
print(paste0("- variance : ",binsum[[4]]),quote=FALSE)
print(paste0("- mode : ",binsum[[5]]),quote=FALSE)
print(paste0("- skewness : ",binsum[[6]]),quote=FALSE)
print(paste0("- kurtosis : ",binsum[[7]]),quote=FALSE)
}
summary(bin_variable(10,0.3))
aux_variance <- function(trials,prob){
return(trials*prob*(1-prob))
}
aux_skewness <- function(trials,prob){
top <- 1 - 2*prob
return(top/sqrt(aux_variance(trials,prob)))
}
summary(bin_variable(10,0.3))
bin_mean <- function(trials,prob){
if(check_trials(trials) && check_prob(prob)){
return(aux_mean(trials,prob))
}
}
bin_variance <- function(trials,prob){
if(check_trials(trials) && check_prob(prob)){
return(aux_variance(trials,prob))
}
}
bin_mode <- function(trials,prob){
if(check_trials(trials) && check_prob(prob)){
return(aux_mode(trials,prob))
}
}
bin_skewness <- function(trials,prob){
if(check_trials(trials) && check_prob(prob)){
return(aux_skewness(trials,prob))
}
}
bin_kurtosis <- function(trials,prob){
if(check_trials(trials) && check_prob(prob)){
return(aux_kurtosis(trials,prob))
}
}
bin_mean(10,0.3)
bin_variance(10,0.3)
bin_mode(10,0.3)
bin_skewness(10,0.3)
bin_kurtosis(10,0.3)
library(testthat)
source(private.R)
source(../../R/private.R)
source("../../R/private.R")
setwd("C:/Users/Merryle Wang/Desktop/stat133/hwks/workout03/binomial")
source(R/private.R)
source(./R/private.R)
source("./R/private.R")
rm(list = ls())
library(testthat)
source("./R/private.R")
test_file("testcheckers.R")
test_file("./test/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
check_prob(-1)
expect_equal(check_prob(0.5),TRUE)
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
test_that("check_prob works", {
expect_true(check_prob(0.5))
expect_length(check_prob(0.5),1)
expect_error(check_prob(-1),"p has to be a number between 0 and 1")
})
expect_equal(1,1)
expect_equal(1,2)
expect_true(check_prob(0.5))
expect_length(check_prob(0.5),1)
expect_error(check_prob(-1),"p has to be a number between 0 and 1")
View(check_prob)
View(check_prob)
View(check_prob)
rm(list = ls())
check_prob <- function(prob){
if(prob >= 0 && prob <= 1){
return(TRUE)
} else {
stop('p has to be a number between 0 and 1')
}
}
check_trials <- function(trials){
if(trials >= 0 && trials %%1 == 0){
return(TRUE)
} else {
stop("invalid trials value")
}
}
check_success <- function(success,trials){
if(success >= 0 && success%%1 == 0 && success <= trials){
return(TRUE)
}else{
if(success > trials){
stop('success cannot be greater than trials')
}else{
stop('inavlid success value')
}
}
}
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
View(check_prob)
View(check_success)
check_prob <- function(prob){
if(prob >= 0 && prob <= 1){
return(TRUE)
} else {
stop('p has to be a number between 0 and 1')
}
}
View(check_prob)
test_file("./tests/testthat/testcheckers.R")
rm(list = ls())
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
source("R/private.R")
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
setwd("C:/Users/Merryle Wang/Desktop/stat133/hwks/workout03/binomial")
rm(ls = list())
rm(list = ls())
setwd("C:/Users/Merryle Wang/Desktop/stat133/hwks/workout03/binomial")
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
test_file("./tests/testthat/testcheckers.R")
setwd("C:/Users/Merryle Wang/Desktop/stat133/hwks/workout03/binomial/tests/testthat")
source(../../R/private.R)
source('../../R/private.R')
rm(list=ls())
setwd("C:/Users/Merryle Wang/Desktop/stat133/hwks/workout03/binomial")
test_file("./tests/testthat/testcheckers.R")
source('../../R/privateaux.R')
source('R/privateaux.R')
aux_variance(2,0.5)
aux_mode(2,0.5)
aux_skewness(2,0.5)
aux_kurtosis(2,0.5)
rm(list = ls())
test_file("./tests/testthat/testsummary.R")
test_file("./tests/testthat/testsummary.R")
test_file("./tests/testthat/testsummary.R")
test_file("./tests/testthat/testsummary.R")
test_file("./tests/testthat/testsummary.R")
test_file("./tests/testthat/testsummary.R")
library(test_that)
library(testthat)
test_file("./tests/testthat/testsummary.R")
source('../../R/functions.R')
source(R/functions.R)
source(./R/functions.R)
source('R/functions.R')
bin_distribution(5,0.5)
source('R/private.R')
bin_distribution(5,0.5)
bin_distribution(5,0.5)$probability
length(bin_distribution)
length(bin_distribution$success)
length(bin_distribution(5,0.5$success)
length(bin_distribution(5,0.5$success)
length(bin_distribution(5,0.5)
$success)
length(bin_distribution(5,0.5))
rm(list = ls())
test_file("./tests/testthat/testbinomial.R")
test_file("./tests/testthat/testbinomial.R")
test_file("./tests/testthat/testbinomial.R")
install.packages(devtools)
install.packages('devtools')
devtools::test()
cd ..
devtools::create("../yo")
#title:check_prob
#description: makes sure the probability is valid
#param prob
#return TRUE if good, else error
check_prob <- function(prob){
if(is.numeric(prob) &&prob >= 0 && prob <= 1){
return(TRUE)
} else {
stop('p has to be a number between 0 and 1')
}
}
check_prob('a')
devtools::document()
devtools::check_man()
devtools::document()
devtools::document()
devtools::document()
devtools:test()
devtools::test()
devtools::document()
devtools::document()
library(binomial)
aux_mean(5,0.5)
rm(list = ls())
aux_mean(5,0.5)
knitr::opts_chunk$set(echo = TRUE)
library(binomial)
X <- bin_var(trials=10,prob=3)
knitr::opts_chunk$set(echo = TRUE)
library(binomial)
X <- bin_var(trials=10,prob=3)
library(binomial)
bin_var(10,0.3)
X <- bin_variable(trials=10,prob=3)
X <- bin_variable(trials=10,prob=0.3)
print(X)
print(summary(x))
print(summary(X))
bin_mean(10,0.3)
bin_variance(10,0.3)
bin_mode(10,0.3)
bin_skewness(10,0.3)
bin_kurtosis(10,0.3)
bin_choose(10,3)
bin_probability(5,2,0.3)
bin_probability(2,5,0.3)
bin_distribution(5,0.3)
bin_cumulative(5,0.3)
dist <- bin_distribution(5,0.3)
cumu <- bin_cumulative(5,0.3)
plot(dist)
plot(cumu)
plot(dist)
plot(cumu)
library(binomial)
install.packages('binomial')
install.packages("binomial")
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
library(devtools)
packages.install("devtools")
install.packages("devtools")
devtools::document()
library(devtools)
library(ggplot2)
install.packaes("devtools")
install.packages("devtools")
library(devtools)
setwd("C:/Users/Merryle Wang/Desktop/stat133/hwks/workout03/binomial")
library(devtools)
install.packages("pkgload")
library(devtools)
install.packages("desc")
library(devtools)
install.packages("remotes")
library(devtools)
install.packages("usethis")
install.packages("usethis")
library(devtools)
devtools::document()
devtools::document()
install.packages("roxygen2")
devtools::document()
install.packages("commonmark")
devtools::document()
install.packages("pkgbuild")
install.packages("pkgbuild")
devtools::document()
install.packages("sessioninfo")
install.packages("sessioninfo")
devtools::document()
devtools::check_man()
devtools::test()
devtools::build()
devtools::install()
devtools::check()
install.packages("xopen")
devtools::check()
install.packages("rcmdcheck")
install.packages("rcmdcheck")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes(./vignettes/introduction.Rmd)
devtools::build_vignettes('./vignettes/introduction.Rmd')
devtools::build_vignettes('./vignettes')
devtools::document()
devtools::check_man()
devtools::test()
devtools::build_vignettes()
devtools::build()
devtools::install()
devtools::check()
plot(bin_distribution(5,0.5))
